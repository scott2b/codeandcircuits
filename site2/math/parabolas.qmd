---
title: "Parabolas"
format: 
  pdf:
    fig-format: pdf
    fig-dpi: 150
    fig-width: 6
    fig-height: 4.2
    geometry:
      - margin=15mm
    documentclass: article
    keep-tex: true
  html:
    fig-width: 12
    fig-height: 8.4
jupyter: python3
cache: false
freeze: false
---

```{python}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt

import numpy as np
import matplotlib.pyplot as plt

def width_and_orientation(figwidth=4, aspect_ratio=0.7):
    """
    Generate a Matplotlib plot with dynamic height scaling to maintain aspect ratio.

    Parameters:
        figwidth (float): Desired figure width.
        aspect_ratio (float): Height-to-width ratio (default 0.7 for 4:3 proportions).

    Returns:
        plt: Matplotlib plot.
    """
    plt.style.use('default')
    plt.rcParams.update({
        'figure.dpi': 150,
        'axes.grid': True,
        'grid.alpha': 0.3,
        'lines.linewidth': 0.8,
        'axes.linewidth': 0.5,
        'axes.axisbelow': True,
        'axes.labelsize': 10,
        'axes.titlesize': 12,
        'xtick.labelsize': 6,
        'ytick.labelsize': 6,
        'legend.fontsize': 5
    })

    figheight = figwidth * aspect_ratio  # Automatically calculate height
    x = np.linspace(-10, 10, 200)
    plt.figure(figsize=(figwidth, figheight))  # Dynamically scale height
    plt.axhline(y=0, color='k', linewidth=0.8)
    plt.axvline(x=0, color='k', linewidth=0.8)
    plt.plot(x, x**2, 'b-', linewidth=0.8, label='y = x²: Base parabola')
    plt.plot(x, 2*x**2, 'r-', linewidth=0.8, label='y = 2x²: Narrower (|a| > 1)')
    plt.plot(x, -0.5*x**2, 'g-', linewidth=0.8, label='y = -0.5x²: Wider (|a| < 1), flipped (a < 0)')
    plt.grid(True)
    plt.legend(loc='lower left')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Width and Orientation')
    plt.xlim(-10, 10)
    plt.ylim(-10, 10)
    plt.xticks(np.arange(-10, 11, 2))
    plt.yticks(np.arange(-10, 11, 2))
    plt.tight_layout()
    for spine in plt.gca().spines.values():
        spine.set_linewidth(0.5)
    return plt

import numpy as np
import matplotlib.pyplot as plt

def vertical_shifts(figwidth=4, aspect_ratio=0.7):
    """
    Generate a Matplotlib plot with dynamic height scaling to maintain aspect ratio.

    Parameters:
        figwidth (float): Desired figure width.
        aspect_ratio (float): Height-to-width ratio (default 0.7 for 4:3 proportions).

    Returns:
        plt: Matplotlib plot.
    """
    figheight = figwidth * aspect_ratio  # Automatically calculate height
    x = np.linspace(-10, 10, 200)

    plt.style.use('default')
    plt.rcParams.update({
        'figure.dpi': 150,
        'axes.grid': True,
        'grid.alpha': 0.3,
        'lines.linewidth': 0.8,
        'axes.linewidth': 0.5,
        'axes.axisbelow': True,
        'axes.labelsize': 10,
        'axes.titlesize': 12,
        'xtick.labelsize': 6,
        'ytick.labelsize': 6,
        'legend.fontsize': 5
    })

    plt.figure(figsize=(figwidth, figheight))  # Set figure size dynamically
    plt.axhline(y=0, color='k', linewidth=0.8)
    plt.axvline(x=0, color='k', linewidth=0.8)
    plt.plot(x, x**2, 'b-', linewidth=0.8, label='y = x²: Base parabola')
    plt.plot(x, x**2 + 2, 'r-', linewidth=0.8, label='y = x² + 2: Shift up')
    plt.plot(x, x**2 - 2, 'g-', linewidth=0.8, label='y = x² - 2: Shift down')
    plt.grid(True)
    plt.legend(loc='lower left')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Vertical Shifts')
    plt.xlim(-10, 10)
    plt.ylim(-10, 10)
    plt.xticks(np.arange(-10, 11, 2))
    plt.yticks(np.arange(-10, 11, 2))
    plt.tight_layout()
    for spine in plt.gca().spines.values():
        spine.set_linewidth(0.5)

    return plt

def vertex_vertical_shifts():
  x = np.linspace(-10, 10, 200)
  plt.figure(figsize=(6, 4.2))
  plt.axhline(y=0, color='k', linewidth=0.8)
  plt.axvline(x=0, color='k', linewidth=0.8)
  plt.plot(x, x**2, 'b-', linewidth=0.8, label='y = x²: Base parabola')
  plt.plot(x, x**2 + 2, 'r-', linewidth=0.8, label='y = x² + 2: Shift up')
  plt.plot(x, x**2 - 2, 'g-', linewidth=0.8, label='y = x² - 2: Shift down')
  plt.grid(True)
  plt.legend(loc='lower left')
  plt.xlabel('x')
  plt.ylabel('y')
  plt.title('Vertical Shifts')
  plt.xlim(-10, 10)
  plt.ylim(-10, 10)
  plt.xticks(np.arange(-10, 11, 2))
  plt.yticks(np.arange(-10, 11, 2))
  plt.gca().set_aspect(1.0)
  plt.tight_layout()
  for spine in plt.gca().spines.values():
      spine.set_linewidth(0.5)
  return plt

def vertex_horizontal_shifts():
  x = np.linspace(-10, 10, 200)
  plt.figure(figsize=(6, 4.2))
  plt.axhline(y=0, color='k', linewidth=0.8)
  plt.axvline(x=0, color='k', linewidth=0.8)
  plt.plot(x, x**2, 'b-', linewidth=0.8, label='y = x²: Base parabola')
  plt.plot(x, (x-2)**2, 'r-', linewidth=0.8, label='y = (x-2)²: Shift right')
  plt.plot(x, (x+2)**2, 'g-', linewidth=0.8, label='y = (x+2)²: Shift left')
  plt.grid(True)
  plt.legend(loc='lower left')
  plt.xlabel('x')
  plt.ylabel('y')
  plt.title('Horizontal Shifts')
  plt.xlim(-10, 10)
  plt.ylim(-10, 10)
  plt.xticks(np.arange(-10, 11, 2))
  plt.yticks(np.arange(-10, 11, 2))
  plt.gca().set_aspect(1.0)
  plt.tight_layout()
  for spine in plt.gca().spines.values():
      spine.set_linewidth(0.5)
  return plt
```

## Standard Form

$f(x) = ax^2 + bx + c$

The coefficient $a$ determines both width and direction:

- $\mathbf{a > 0}$: Opens upward
- $\mathbf{a < 0}$: Opens downward
- $\mathbf{|a| > 1}$: Narrower
- $\mathbf{|a| < 1}$: Wider

The constant term $c$ controls vertical position:

- $c > 0$: shift up
- $c < 0$: shift down

::: {layout-ncol=2}

```{python}
#| echo: false
#| fig-width: 4
#| fig-height: 3
#| out-width: 100% 
plt = width_and_orientation()
plt.show()
plt.close()
```

```{python}
#| echo: false
#| fig-width: 4
#| fig-height: 3
#| out-width: 100% 
plt = vertical_shifts()
plt.show()
plt.close()
```

:::



## Vertex Form

$f(x) = a(x - h)^2 + k$

- $h$ controls **horizontal shift**
  - $h > 0$: shift right
  - $h < 0$: shift left
- $k$ is the **vertical position** of the vertex
  - $k > 0$: shift up
  - $k < 0$: shift down


```{python}
#| fig-responsive: true
#| fig-width: 12
#| fig-height: 12
#| echo: false

plt = vertex_vertical_shifts()
plt.show()
plt.close()

plt = vertex_horizontal_shifts()
plt.show()
plt.close()
```