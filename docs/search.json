[
  {
    "objectID": "second_order.html",
    "href": "second_order.html",
    "title": "Second Order System Response",
    "section": "",
    "text": "The transfer function \\(H(s)\\) for a second-order system is:\n\\[H(s) = \\frac{\\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2}\\]\nwhere:\n\n\\(\\zeta\\) is the damping ratio\n\\(\\omega_n\\) is the natural frequency"
  },
  {
    "objectID": "second_order.html#system-transfer-function",
    "href": "second_order.html#system-transfer-function",
    "title": "Second Order System Response",
    "section": "",
    "text": "The transfer function \\(H(s)\\) for a second-order system is:\n\\[H(s) = \\frac{\\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2}\\]\nwhere:\n\n\\(\\zeta\\) is the damping ratio\n\\(\\omega_n\\) is the natural frequency"
  },
  {
    "objectID": "second_order.html#response-types",
    "href": "second_order.html#response-types",
    "title": "Second Order System Response",
    "section": "Response Types",
    "text": "Response Types\nThe system exhibits three characteristic behaviors:\n\nUnderdamped (\\(\\zeta &lt; 1\\))\n\nSystem oscillates with decreasing amplitude\nCommon in systems with insufficient damping\n\nCritically Damped (\\(\\zeta = 1\\))\n\nFastest return to steady state without oscillation\nOptimal for many control applications\n\nOverdamped (\\(\\zeta &gt; 1\\))\n\nReturns to steady state without oscillation\nSlower response than critically damped"
  },
  {
    "objectID": "second_order.html#interactive-plot",
    "href": "second_order.html#interactive-plot",
    "title": "Second Order System Response",
    "section": "Interactive Plot",
    "text": "Interactive Plot\n\n\nCode\nviewof dampingRatio = Inputs.range([0, 2], {\n  value: 1.2,\n  step: 0.1,\n  label: \"Damping ratio (ζ)\"\n})\n\nviewof naturalFreq = Inputs.range([0.1, 5], {\n  value: 3.4,\n  step: 0.1,\n  label: \"Natural frequency (ωn)\"\n})\n\ndata = {\n  const t = Array.from({length: 1000}, (_, i) =&gt; i * 0.01);\n  return t.map(t =&gt; ({\n    t,\n    y: Math.exp(-dampingRatio * naturalFreq * t) * \n       Math.cos(naturalFreq * Math.sqrt(Math.max(0, 1 - dampingRatio**2)) * t)\n  }));\n}\n\nPlot.plot({\n  width: 800,\n  height: 500,\n  grid: true,\n  x: {\n    label: \"Time (s)\",\n    domain: [0, 10]\n  },\n  y: {\n    label: \"Amplitude\",\n    domain: [-1, 1]\n  },\n  marks: [\n    Plot.line(data, {\n      x: \"t\",\n      y: \"y\",\n      stroke: \"blue\"\n    })\n  ]\n})"
  },
  {
    "objectID": "second_order-revealjs.html#system-transfer-function",
    "href": "second_order-revealjs.html#system-transfer-function",
    "title": "Second Order System Response",
    "section": "System Transfer Function",
    "text": "System Transfer Function\nThe transfer function \\(H(s)\\) for a second-order system is:\n\\[H(s) = \\frac{\\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2}\\]\nwhere:\n\n\\(\\zeta\\) is the damping ratio\n\\(\\omega_n\\) is the natural frequency"
  },
  {
    "objectID": "second_order-revealjs.html#response-types",
    "href": "second_order-revealjs.html#response-types",
    "title": "Second Order System Response",
    "section": "Response Types",
    "text": "Response Types\nThe system exhibits three characteristic behaviors:\n\nUnderdamped (\\(\\zeta &lt; 1\\))\n\nSystem oscillates with decreasing amplitude\nCommon in systems with insufficient damping\n\nCritically Damped (\\(\\zeta = 1\\))\n\nFastest return to steady state without oscillation\nOptimal for many control applications\n\nOverdamped (\\(\\zeta &gt; 1\\))\n\nReturns to steady state without oscillation\nSlower response than critically damped"
  },
  {
    "objectID": "second_order-revealjs.html#interactive-plot",
    "href": "second_order-revealjs.html#interactive-plot",
    "title": "Second Order System Response",
    "section": "Interactive Plot",
    "text": "Interactive Plot\n\n\nCode\nviewof dampingRatio = Inputs.range([0, 2], {\n  value: 1.2,\n  step: 0.1,\n  label: \"Damping ratio (ζ)\"\n})\n\nviewof naturalFreq = Inputs.range([0.1, 5], {\n  value: 3.4,\n  step: 0.1,\n  label: \"Natural frequency (ωn)\"\n})\n\ndata = {\n  const t = Array.from({length: 1000}, (_, i) =&gt; i * 0.01);\n  return t.map(t =&gt; ({\n    t,\n    y: Math.exp(-dampingRatio * naturalFreq * t) * \n       Math.cos(naturalFreq * Math.sqrt(Math.max(0, 1 - dampingRatio**2)) * t)\n  }));\n}\n\nPlot.plot({\n  width: 800,\n  height: 500,\n  grid: true,\n  x: {\n    label: \"Time (s)\",\n    domain: [0, 10]\n  },\n  y: {\n    label: \"Amplitude\",\n    domain: [-1, 1]\n  },\n  marks: [\n    Plot.line(data, {\n      x: \"t\",\n      y: \"y\",\n      stroke: \"blue\"\n    })\n  ]\n})"
  },
  {
    "objectID": "second_order-revealjs.html#second-order-systems",
    "href": "second_order-revealjs.html#second-order-systems",
    "title": "Second Order System Response",
    "section": "Second Order Systems",
    "text": "Second Order Systems\n\n\nModel many physical and control systems\nCharacterized by two parameters:\n\nDamping ratio (ζ)\nNatural frequency (ωn)"
  },
  {
    "objectID": "second_order-revealjs.html#transfer-function",
    "href": "second_order-revealjs.html#transfer-function",
    "title": "Second Order System Response",
    "section": "Transfer Function",
    "text": "Transfer Function\n\n\nThe system is described by:\n\\[H(s) = \\frac{\\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2}\\]\n\nKey parameters:\n\n\n\\(\\zeta\\) controls oscillation behavior\n\\(\\omega_n\\) determines response speed\nTogether they shape system dynamics"
  },
  {
    "objectID": "second_order-revealjs.html#response-types-1",
    "href": "second_order-revealjs.html#response-types-1",
    "title": "Second Order System Response",
    "section": "Response Types",
    "text": "Response Types\nThree characteristic behaviors based on damping ratio:\n\n\nUnderdamped (\\(\\zeta &lt; 1\\))\n\nOscillates with decreasing amplitude\n\n\n\n\n\nCritically Damped (\\(\\zeta = 1\\))\n\nFastest non-oscillatory response\n\n\n\n\n\nOverdamped (\\(\\zeta &gt; 1\\))\n\nSlow return to steady state"
  },
  {
    "objectID": "second_order-revealjs.html#underdamped-response",
    "href": "second_order-revealjs.html#underdamped-response",
    "title": "Second Order System Response",
    "section": "Underdamped Response",
    "text": "Underdamped Response\n\n\nCharacteristics:\n\n\\(\\zeta &lt; 1\\)\nOscillatory behavior\nCommon in practice"
  },
  {
    "objectID": "second_order-revealjs.html#critically-damped-response",
    "href": "second_order-revealjs.html#critically-damped-response",
    "title": "Second Order System Response",
    "section": "Critically Damped Response",
    "text": "Critically Damped Response\n\n\nCharacteristics:\n\n\\(\\zeta = 1\\)\nNo oscillation\nFastest settling"
  },
  {
    "objectID": "second_order-revealjs.html#overdamped-response",
    "href": "second_order-revealjs.html#overdamped-response",
    "title": "Second Order System Response",
    "section": "Overdamped Response",
    "text": "Overdamped Response\n\n\nCharacteristics:\n\n\\(\\zeta &gt; 1\\)\nNo oscillation\nSlower response"
  },
  {
    "objectID": "second_order-revealjs.html#applications",
    "href": "second_order-revealjs.html#applications",
    "title": "Second Order System Response",
    "section": "Applications",
    "text": "Applications\n\n\nMechanical Systems\n\nSuspension systems\nVibration dampers\n\nControl Systems\n\nMotor position control\nTemperature regulation\n\nElectronic Systems\n\nRLC circuits\nFilters"
  },
  {
    "objectID": "second_order-revealjs.html#summary",
    "href": "second_order-revealjs.html#summary",
    "title": "Second Order System Response",
    "section": "Summary",
    "text": "Summary\nKey takeaways:\n\n\nSecond order systems are fundamental\nDamping ratio determines response type\nNatural frequency affects response speed\nDesign involves balancing speed vs. stability"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "All Posts",
    "section": "",
    "text": "All Posts\n\nBrowse all articles and tutorials.\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nDescription\n\n\nCategories\n\n\n\n\n\n\nMay 10, 2025\n\n\nSpeed Up Typesense Startup in Production with Disk Persistence\n\n\n\n\n\ntypesense\n\n\n\n\nMay 9, 2025\n\n\nFixing Git LFS Integration in Obsidian’s Git Plugin on macOS\n\n\n\n\n\nmacos, obsidian, git\n\n\n\n\nMar 17, 2025\n\n\nSome ways to easily get news content\n\n\n\n\n\npython\n\n\n\n\nOct 11, 2022\n\n\nUsing urllib to wget a file in Python 3\n\n\nPost description\n\n\npython, io\n\n\n\n\nOct 11, 2022\n\n\nAdding Post content to Jekyll search\n\n\n\n\n\nweb, jekyll\n\n\n\n\nOct 11, 2022\n\n\nUse baseurl to specify the location of assets in Jekyll\n\n\n\n\n\nweb, jekyll\n\n\n\n\nOct 11, 2022\n\n\nSpecifying a custom Jekyll site location in GitHub pages\n\n\n\n\n\nweb, jekyll\n\n\n\n\nOct 10, 2022\n\n\nMy Publication Pipeline\n\n\n\n\n\nmisc\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2025-05-09-obsidian-git-lfs/index.html",
    "href": "posts/2025-05-09-obsidian-git-lfs/index.html",
    "title": "Fixing Git LFS Integration in Obsidian’s Git Plugin on macOS",
    "section": "",
    "text": "If you’re using the Obsidian Git plugin with Git LFS (Large File Storage) on macOS, you may run into a frustrating issue: git-lfs works fine in your terminal, but Obsidian Git throws this error:\nEven after running git lfs install and configuring .gitattributes correctly, Git LFS fails — and so do pushes involving large files."
  },
  {
    "objectID": "posts/2025-05-09-obsidian-git-lfs/index.html#the-problem-gui-apps-ignore-your-shell-config",
    "href": "posts/2025-05-09-obsidian-git-lfs/index.html#the-problem-gui-apps-ignore-your-shell-config",
    "title": "Fixing Git LFS Integration in Obsidian’s Git Plugin on macOS",
    "section": "🧠 The Problem: GUI apps ignore your shell config",
    "text": "🧠 The Problem: GUI apps ignore your shell config\nWhen you launch Obsidian from the Dock, Spotlight, or Finder:\n\nIt does not load your ~/.zprofile, ~/.bashrc, or config.fish.\nIt does not inherit the same $PATH you see in your terminal.\nSo anything installed in /usr/local/bin, like git-lfs, is invisible to Obsidian’s Git plugin."
  },
  {
    "objectID": "posts/2025-05-09-obsidian-git-lfs/index.html#the-solution-a-custom-.app-launcher-with-a-fixed-path",
    "href": "posts/2025-05-09-obsidian-git-lfs/index.html#the-solution-a-custom-.app-launcher-with-a-fixed-path",
    "title": "Fixing Git LFS Integration in Obsidian’s Git Plugin on macOS",
    "section": "✅ The Solution: A Custom .app Launcher With a Fixed $PATH",
    "text": "✅ The Solution: A Custom .app Launcher With a Fixed $PATH\nInstead of trying to patch macOS’s environment or launchctl quirks, the simplest and most reliable fix is:\n\n🛠 Build a wrapper .app that launches Obsidian with the correct environment.\n\nThis gives you:\n\nA real clickable macOS app\nThe ability to fix $PATH permanently\nA proper app icon and dock integration"
  },
  {
    "objectID": "posts/2025-05-09-obsidian-git-lfs/index.html#how-to-build-the-app",
    "href": "posts/2025-05-09-obsidian-git-lfs/index.html#how-to-build-the-app",
    "title": "Fixing Git LFS Integration in Obsidian’s Git Plugin on macOS",
    "section": "🚀 How to Build the App",
    "text": "🚀 How to Build the App\n\n1. Create the directory structure\nmkdir -p ~/Applications/Obsidian\\ With\\ Git\\ LFS.app/Contents/{MacOS,Resources}\n\nAdd a wrapper script\n\nCreate the file: ~/Applications/Obsidian With Git LFS.app/Contents/MacOS/Obsidian With Git LFS\n#!/bin/bash\nexport PATH=\"$HOME/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n/Applications/Obsidian.app/Contents/MacOS/Obsidian \"$@\"\nMake it executable:\nchmod +x ~/Applications/Obsidian\\ With\\ Git\\ LFS.app/Contents/MacOS/Obsidian\\ With\\ Git\\ LFS\n\nAdd a valid Info.plist\n\nCreate Contents/Info.plist with this content:\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n  &lt;key&gt;CFBundleName&lt;/key&gt;\n  &lt;string&gt;Obsidian With Git LFS&lt;/string&gt;\n  &lt;key&gt;CFBundleIdentifier&lt;/key&gt;\n  &lt;string&gt;com.example.obsidian-lfs-launcher&lt;/string&gt;\n  &lt;key&gt;CFBundleVersion&lt;/key&gt;\n  &lt;string&gt;1.0&lt;/string&gt;\n  &lt;key&gt;CFBundlePackageType&lt;/key&gt;\n  &lt;string&gt;APPL&lt;/string&gt;\n  &lt;key&gt;CFBundleExecutable&lt;/key&gt;\n  &lt;string&gt;Obsidian With Git LFS&lt;/string&gt;\n  &lt;key&gt;CFBundleIconFile&lt;/key&gt;\n  &lt;string&gt;icon.icns&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n\nCopy the Obsidian icon\n\ncp /Applications/Obsidian.app/Contents/Resources/icon.icns \\\n   ~/Applications/Obsidian\\ With\\ Git\\ LFS.app/Contents/Resources/icon.icns\n\nRefresh Finder and Dock\n\ntouch ~/Applications/Obsidian\\ With\\ Git\\ LFS.app\nkillall Finder\nYou can now drag the app to your Dock and launch it like any normal app.\n⸻\n💡 Why This Works\nmacOS apps launched from the GUI don’t inherit your shell environment. By wrapping Obsidian in a script and explicitly setting PATH, you restore visibility to git-lfs (and anything else installed outside system paths).\nNo more pre-push hook errors. No more surprises when you push large files. And it looks and works like a native app.\n⸻\n🧭 TL;DR\n\n\n\n\n\n\n\nProblem\nFix\n\n\n\n\nGit LFS not found in Obsidian Git\nBuild a .app wrapper that sets a clean $PATH\n\n\nNo icon for Automator-style apps\nAdd Info.plist and obsidian.icns\n\n\nGUI apps don’t see shell environment\nUse a launch wrapper, not a shell config\n\n\n\n⸻\nThis fix keeps your Git workflows smooth and protects you from GitHub’s 100MB limit surprises. Launch Obsidian like you always do — but now it Just Works™."
  },
  {
    "objectID": "posts/2022-10-11-using-urllib-to-wget-a-file-in-python/index.html",
    "href": "posts/2022-10-11-using-urllib-to-wget-a-file-in-python/index.html",
    "title": "Using urllib to wget a file in Python 3",
    "section": "",
    "text": "I used to use python3-wget to fetch remote files if I needed to save them to my filesystem from Python code.\nAnymore, I am finding that urllib and shutil used together will do the trick:\n\nimport os\nimport shutil\nimport urllib\nimport urllib.request\n\n\ndef download(url, tofile=None):\n    \"\"\"Fetch a file from `url` and save it to `tofile`.\n    \"\"\"\n    if tofile is None:\n        tofile = os.path.basename(urllib.parse.urlparse(url).path)\n    with urllib.request.urlopen(url) as response, open(tofile, \"wb\") as outfile:\n        shutil.copyfileobj(response, outfile)\n    return tofile"
  },
  {
    "objectID": "posts/2022-10-11-custom-jekyll-location-github-pages/index.html",
    "href": "posts/2022-10-11-custom-jekyll-location-github-pages/index.html",
    "title": "Specifying a custom Jekyll site location in GitHub pages",
    "section": "",
    "text": "If you move the root of your Jekyll project to a subdirectory of a Github Pages enabled repository, you will need to be sure to change the source and destination locations for the jekyll-build-pages action accordingly.\nBut, that’s not all. It is not obvious, but you also need to specify the path to the upload-pages-artifact action. Failure to do this will result in a GitHub Actions build fail for the “Uplodad artifact” stage, with the error message: “Error: Process completed with exit code 2” (see screenshot below).\n\n\n\nBuild fail screenshot\n\n\nThe reason this configuration requirement is not obvious is because the path parameter is not defined in the auto-generated Action config that GitHub gives you for Jekyll pages, but instead utilizes the default value of ./_site. To specify the path, use the with &gt; path syntax.\nFor example, I have moved my Jekyll root to a location called site. Thus, the jobs section of my .github/workflows/pages.yml looks like this, (with special attention paid to the jekyll-build-pages, and the upload-pages-artifact actions):\njobs:\n  # Build job\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Setup Pages\n        uses: actions/configure-pages@v2\n      - name: Build with Jekyll\n        uses: actions/jekyll-build-pages@v1\n        with:\n          source: ./site/\n          destination: ./site/_site\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          path: ./site/_site"
  },
  {
    "objectID": "posts/2022-10-10-my-publication-pipeline/index.html",
    "href": "posts/2022-10-10-my-publication-pipeline/index.html",
    "title": "My Publication Pipeline",
    "section": "",
    "text": "Here is a rough outline of how my content makes its way to publication.\n\nObsidian for idea gathering and note-taking\nMy primary knowledge management system is Obsidian{:target=“_blank”}. The main features that I find useful in Obsidian are:\n\nMarkdown based note-taking\nLinks between notes\n\nObsidian is pleasant to use, but I think it does target a bit more of a technical user base than, say, Notion or Evernote. Roam{:target=“_blank”} is a popular Obsidian competetor that I have not tried.\nI may eventually post more about how I use Obsidian, but there is no shortage of PKM (Personal Knowledge Management) pundits fan-blogging about Obsidian.\n\n\n… more TBD"
  },
  {
    "objectID": "notebooks/index.html",
    "href": "notebooks/index.html",
    "title": "Code Notebooks",
    "section": "",
    "text": "Notebooks for code exploration.\n\n\n\nNLP\nNatural Language Processing notebooks.\n\nGDELT\n\nFetching from the GKG"
  },
  {
    "objectID": "math/parabolas/projectile-motion/index.html",
    "href": "math/parabolas/projectile-motion/index.html",
    "title": "Projectile Motion and Parabolas",
    "section": "",
    "text": "Projectile motion occurs when an object is launched into the air and moves under the influence of gravity alone. The path of the object forms a parabola, making it a real-world application of quadratic functions.\n\n\n\nThe motion of a projectile can be described using the following equations:\n\nHorizontal Distance (x):\n\\[\nx(t) = v_0 \\cos(\\theta) \\cdot t\n\\]\n\n\\(v_0\\) is the initial velocity (m/s).\n\n\\(\\theta\\) is the launch angle (degrees or radians).\n\n\\(t\\) is time (seconds).\n\nVertical Height (y):\n\\[\ny(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\n\\]\n\n\\(g\\) is the acceleration due to gravity (\\(9.81 \\, \\text{m/s}^2\\)).\n\nThe term \\(-\\frac{1}{2} g t^2\\) represents the downward pull of gravity.\n\n\nTogether, these equations describe a parabolic trajectory of the form:\n\\[\ny = ax^2 + bx + c\n\\]\nwhere the coefficients depend on the initial conditions of the launch.\n\n\n\n\n\nStart Point: The launch occurs at time \\(t = 0\\) and position \\((0, 0)\\).\n\nMaximum Height: At the peak of the trajectory, the vertical velocity is zero. This occurs at:\n\\[\nt_{\\text{max}} = \\frac{v_0 \\sin(\\theta)}{g}\n\\]\nThe maximum height \\(y_{\\text{max}}\\) is given by:\n\\[\ny_{\\text{max}} = \\frac{(v_0 \\sin(\\theta))^2}{2g}\n\\]\nRange (Horizontal Distance): The projectile lands when \\(y = 0\\). The total time of flight is:\n\\[\nt_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\n\\]\nThe total horizontal distance (range) is:\n\\[\nx_{\\text{range}} = v_0 \\cos(\\theta) \\cdot t_{\\text{flight}}\n\\]\n\n\n\n\n\nBelow is a plot showing the parabolic trajectory of a projectile under gravity. The red markers highlight key points of the path:\n- The Start point \\((0, 0)\\)\n- The Maximum Height, the peak of the parabola\n- The End Point, where the projectile returns to the ground\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSports: Kicking a soccer ball, shooting a basketball, or hitting a golf ball all create parabolic trajectories.\n\nPhysics and Engineering: Understanding projectile motion helps design rockets, missiles, and water fountains.\n\nEntertainment: Animations and games simulate realistic projectile paths using these principles.\n\n\n\n\n\nProjectile motion beautifully demonstrates how quadratic functions and parabolas describe real-world motion, combining simplicity and accuracy to solve problems in physics, engineering, and everyday life."
  },
  {
    "objectID": "math/parabolas/projectile-motion/index.html#projectile-motion-and-parabolas",
    "href": "math/parabolas/projectile-motion/index.html#projectile-motion-and-parabolas",
    "title": "Projectile Motion and Parabolas",
    "section": "",
    "text": "Projectile motion occurs when an object is launched into the air and moves under the influence of gravity alone. The path of the object forms a parabola, making it a real-world application of quadratic functions.\n\n\n\nThe motion of a projectile can be described using the following equations:\n\nHorizontal Distance (x):\n\\[\nx(t) = v_0 \\cos(\\theta) \\cdot t\n\\]\n\n\\(v_0\\) is the initial velocity (m/s).\n\n\\(\\theta\\) is the launch angle (degrees or radians).\n\n\\(t\\) is time (seconds).\n\nVertical Height (y):\n\\[\ny(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2} g t^2\n\\]\n\n\\(g\\) is the acceleration due to gravity (\\(9.81 \\, \\text{m/s}^2\\)).\n\nThe term \\(-\\frac{1}{2} g t^2\\) represents the downward pull of gravity.\n\n\nTogether, these equations describe a parabolic trajectory of the form:\n\\[\ny = ax^2 + bx + c\n\\]\nwhere the coefficients depend on the initial conditions of the launch.\n\n\n\n\n\nStart Point: The launch occurs at time \\(t = 0\\) and position \\((0, 0)\\).\n\nMaximum Height: At the peak of the trajectory, the vertical velocity is zero. This occurs at:\n\\[\nt_{\\text{max}} = \\frac{v_0 \\sin(\\theta)}{g}\n\\]\nThe maximum height \\(y_{\\text{max}}\\) is given by:\n\\[\ny_{\\text{max}} = \\frac{(v_0 \\sin(\\theta))^2}{2g}\n\\]\nRange (Horizontal Distance): The projectile lands when \\(y = 0\\). The total time of flight is:\n\\[\nt_{\\text{flight}} = \\frac{2 v_0 \\sin(\\theta)}{g}\n\\]\nThe total horizontal distance (range) is:\n\\[\nx_{\\text{range}} = v_0 \\cos(\\theta) \\cdot t_{\\text{flight}}\n\\]\n\n\n\n\n\nBelow is a plot showing the parabolic trajectory of a projectile under gravity. The red markers highlight key points of the path:\n- The Start point \\((0, 0)\\)\n- The Maximum Height, the peak of the parabola\n- The End Point, where the projectile returns to the ground\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSports: Kicking a soccer ball, shooting a basketball, or hitting a golf ball all create parabolic trajectories.\n\nPhysics and Engineering: Understanding projectile motion helps design rockets, missiles, and water fountains.\n\nEntertainment: Animations and games simulate realistic projectile paths using these principles.\n\n\n\n\n\nProjectile motion beautifully demonstrates how quadratic functions and parabolas describe real-world motion, combining simplicity and accuracy to solve problems in physics, engineering, and everyday life."
  },
  {
    "objectID": "math/parabolas/bridges/index.html",
    "href": "math/parabolas/bridges/index.html",
    "title": "Parabolas in Bridges and Architecture",
    "section": "",
    "text": "In architecture and engineering, parabolas are widely used in the design of suspension bridges and arches. Parabolic curves are structurally efficient and provide stability by evenly distributing weight and tension.\n\n\n\nThe cables of a suspension bridge form a parabolic shape due to the force of gravity acting on the suspended cables. A parabolic curve ensures that the tension in the cable is distributed efficiently across its length.\n\n\n\nParabolic Equation:\nThe shape of a suspension bridge cable is modeled as:\n\\[\ny = ax^2 + bx + c\n\\]\n\n\\(y\\) represents the vertical height of the cable.\n\n\\(x\\) is the horizontal distance.\n\n\\(a\\), \\(b\\), and \\(c\\) are constants determined by the dimensions of the bridge.\n\nVertex:\nThe lowest point (vertex) of the parabola represents the point of maximum tension, often located at the center of the bridge.\nFocus:\nIn parabolic arches, the focus is the point where all forces converge, which ensures maximum stability.\n\n\n\n\n\n\n\nWhy Use Parabolas?\nParabolas minimize stress by evenly distributing the load along the cable or arch. This reduces material usage while maintaining strength.\nExample Bridges:\n\nGolden Gate Bridge (San Francisco, USA)\n\nBrooklyn Bridge (New York, USA)\n\n\n\n\n\n\nBelow is a parabolic curve representing the shape of a suspension bridge cable. This visualization shows how the cable hangs under uniform weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuspension Bridges: Parabolas allow cables to carry the load efficiently. The cables transfer the weight to the bridge’s towers.\n\nParabolic Arches: In buildings, arches shaped as parabolas are stable and require less material.\n\nDomes: Some architectural domes use parabolic curves to distribute forces evenly.\n\n\n\n\n\nParabolas play a significant role in architectural design and engineering, particularly in bridges and arches. Their ability to distribute forces efficiently makes them essential for creating stable and elegant structures."
  },
  {
    "objectID": "math/parabolas/bridges/index.html#parabolas-in-bridges-and-architecture",
    "href": "math/parabolas/bridges/index.html#parabolas-in-bridges-and-architecture",
    "title": "Parabolas in Bridges and Architecture",
    "section": "",
    "text": "In architecture and engineering, parabolas are widely used in the design of suspension bridges and arches. Parabolic curves are structurally efficient and provide stability by evenly distributing weight and tension.\n\n\n\nThe cables of a suspension bridge form a parabolic shape due to the force of gravity acting on the suspended cables. A parabolic curve ensures that the tension in the cable is distributed efficiently across its length.\n\n\n\nParabolic Equation:\nThe shape of a suspension bridge cable is modeled as:\n\\[\ny = ax^2 + bx + c\n\\]\n\n\\(y\\) represents the vertical height of the cable.\n\n\\(x\\) is the horizontal distance.\n\n\\(a\\), \\(b\\), and \\(c\\) are constants determined by the dimensions of the bridge.\n\nVertex:\nThe lowest point (vertex) of the parabola represents the point of maximum tension, often located at the center of the bridge.\nFocus:\nIn parabolic arches, the focus is the point where all forces converge, which ensures maximum stability.\n\n\n\n\n\n\n\nWhy Use Parabolas?\nParabolas minimize stress by evenly distributing the load along the cable or arch. This reduces material usage while maintaining strength.\nExample Bridges:\n\nGolden Gate Bridge (San Francisco, USA)\n\nBrooklyn Bridge (New York, USA)\n\n\n\n\n\n\nBelow is a parabolic curve representing the shape of a suspension bridge cable. This visualization shows how the cable hangs under uniform weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSuspension Bridges: Parabolas allow cables to carry the load efficiently. The cables transfer the weight to the bridge’s towers.\n\nParabolic Arches: In buildings, arches shaped as parabolas are stable and require less material.\n\nDomes: Some architectural domes use parabolic curves to distribute forces evenly.\n\n\n\n\n\nParabolas play a significant role in architectural design and engineering, particularly in bridges and arches. Their ability to distribute forces efficiently makes them essential for creating stable and elegant structures."
  },
  {
    "objectID": "math/index.html",
    "href": "math/index.html",
    "title": "Mathematical Foundations",
    "section": "",
    "text": "Advanced mathematics for engineering applications, including calculus, linear algebra, and differential equations.\n\n\n\nFundamentals\nCore mathematical concepts that form the foundation for advanced topics.\n\n\nFunctions and Relations\nUnderstanding mappings, domains, and mathematical relationships.\nParabolic functions and their properties.\n\n\nComplex Numbers\nOperations and applications in engineering and physics.\n\n\nSeries and Sequences\nConvergence, divergence, and infinite series analysis.\n\n\n\n\nVector Calculus\nEssential tools for electromagnetic theory and fluid dynamics.\n\n\nGradient Fields\nUnderstanding scalar fields and their derivatives in multiple dimensions.\n\n\nDivergence and Curl\nVector field operations and their physical interpretations.\n\n\nLine and Surface Integrals\nIntegration techniques for vector fields along paths and surfaces.\n\n\n\n\nLinear Algebra\nFundamental concepts for signal processing and machine learning.\n\n\nVector Spaces\nBasic properties and operations in vector spaces.\n\n\nMatrix Operations\nAdvanced matrix manipulations and their applications.\n\n\nEigenvalues and Eigenvectors\nUnderstanding characteristic equations and diagonalization.\n\n\n\n\nDifferential Equations\nMathematical modeling of dynamic systems.\n\n\nOrdinary Differential Equations\nFirst and second-order equations, systems of ODEs.\n\n\nPartial Differential Equations\nHeat equation, wave equation, Laplace equation.\n\n\nNumerical Methods\nComputational approaches to solving differential equations."
  },
  {
    "objectID": "about/index.html",
    "href": "about/index.html",
    "title": "About",
    "section": "",
    "text": "Code & Circuits is an engineer’s notebook for exploring mathematics, electronics, and programming.\n\n\n\nThis site serves as a collection of technical notes, tutorials, and explorations across various engineering disciplines. The content focuses on:\n\nMathematical foundations for engineering applications\nElectronic circuit design and analysis\nProgramming and software development\nData science and machine learning\n\n\n\n\nContent is organized into:\n\nPosts: Regular articles and tutorials on specific topics\nTopic Areas: Curated collections of related content organized by subject\nCode Notebooks: Interactive examples and demonstrations\n\n\n\n\nThis site is:\n\nBuilt with Quarto\nWritten in Markdown and Jupyter notebooks"
  },
  {
    "objectID": "about/index.html#purpose",
    "href": "about/index.html#purpose",
    "title": "About",
    "section": "",
    "text": "This site serves as a collection of technical notes, tutorials, and explorations across various engineering disciplines. The content focuses on:\n\nMathematical foundations for engineering applications\nElectronic circuit design and analysis\nProgramming and software development\nData science and machine learning"
  },
  {
    "objectID": "about/index.html#structure",
    "href": "about/index.html#structure",
    "title": "About",
    "section": "",
    "text": "Content is organized into:\n\nPosts: Regular articles and tutorials on specific topics\nTopic Areas: Curated collections of related content organized by subject\nCode Notebooks: Interactive examples and demonstrations"
  },
  {
    "objectID": "about/index.html#technical-details",
    "href": "about/index.html#technical-details",
    "title": "About",
    "section": "",
    "text": "This site is:\n\nBuilt with Quarto\nWritten in Markdown and Jupyter notebooks"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nMathematical Foundations\n",
    "section": "",
    "text": "An engineer’s notebook."
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "\nMathematical Foundations\n",
    "section": "Latest Posts",
    "text": "Latest Posts\n\n\n\n\n\n\n\nSpeed Up Typesense Startup in Production with Disk Persistence\n\n\n\n\n\n\nMay 10, 2025\n\n\n\n\n\n\n\n\n\n\n\nFixing Git LFS Integration in Obsidian’s Git Plugin on macOS\n\n\n\n\n\n\nMay 9, 2025\n\n\n\n\n\n\n\n\n\n\n\nSome ways to easily get news content\n\n\n\n\n\n\nMar 17, 2025\n\n\n\n\n\n\n\n\nNo matching items\n\n\nView All Posts →"
  },
  {
    "objectID": "index.html#featured-topics",
    "href": "index.html#featured-topics",
    "title": "\nMathematical Foundations\n",
    "section": "Featured Topics",
    "text": "Featured Topics\n\n\n\n\n ∑ \n\n\nMathematical Foundations\n\n\nAdvanced mathematics for engineering applications, including calculus, linear algebra, and differential equations.\n\nVector Calculus Linear Algebra Differential Equations\n\nExplore Math →\n\n\n\n\n    \n\n\nCircuit Design\n\n\nComprehensive guides on electronic circuit design, simulation tools, and practical implementations.\n\nDigital Logic Analog Circuits PCB Design\n\nExplore Circuits →\n\n\n\n\n   \n\n\nCode Notebooks\n\n\nInteractive Python notebooks for solving real-world engineering problems and data analysis.\n\nPython MATLAB Simulation\n\nExplore Notebooks →\n\n\n\n\n  \n\n\nCode Explorations\n\n\nDeep dives into programming concepts, algorithms, and software design patterns.\n\nAlgorithms Design Patterns System Design\n\nExplore Code →\n\n\n\n\n  \n\n\nEngineering Fundamentals\n\n\nCore engineering principles, from mechanics to thermodynamics and control systems.\n\nMechanics Control Systems Thermodynamics\n\nExplore Engineering →\n\n\n\n\n    \n\n\nComputer Science\n\n\nFundamental computer science concepts, from data structures to operating systems.\n\nData Structures Operating Systems Networks\n\nExplore CS →\n\n\n\n\n     \n\n\nData Science\n\n\nStatistical analysis, machine learning, and data visualization techniques.\n\nStatistics Machine Learning Visualization\n\nExplore Data →\n\n\n\n\n   \n\n\nComplexity Science\n\n\nStudy of complex systems, emergence, and network science.\n\nComplex Systems Network Theory Emergence\n\nExplore Complexity →"
  },
  {
    "objectID": "math/parabolas/antennas/index.html",
    "href": "math/parabolas/antennas/index.html",
    "title": "Parabolas in Satellite Dishes and Antennas",
    "section": "",
    "text": "Parabolas are integral in designing satellite dishes and radio antennas due to their unique reflective properties. A parabola focuses all incoming signals or waves to a single point, known as the focus, ensuring optimal signal reception.\n\n\n\nA parabolic reflector is shaped like a parabola and has the following properties:\n\nParabolic Equation:\nThe shape of the dish can be represented as:\n\\[\ny = ax^2\n\\]\n\n\\(y\\) represents the vertical distance.\n\n\\(x\\) represents the horizontal distance.\n\n\\(a\\) is a coefficient that determines the steepness of the parabola.\n\nFocus:\n\nIncoming parallel waves (radio, light, or sound) reflect off the parabolic surface and converge at a single point called the focus.\n\nThe receiver (or feed horn) is placed at the focus to collect the signals.\n\nReflective Property:\nThe parabola reflects all waves parallel to its axis toward the focus, maximizing signal strength.\n\n\n\n\n\nA satellite dish works as a parabolic reflector to collect signals from communication satellites:\n- Signals from space hit the parabolic surface.\n- The surface reflects the signals to the receiver at the dish’s focus.\n- The signals are then processed and transmitted to your devices.\n\n\n\n\nBelow is a visualization of how a parabola reflects incoming waves toward its focus.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSatellite Dishes: Parabolic reflectors ensure signals from satellites converge at the focus for clear reception.\n\nRadio Telescopes: Used to collect faint radio waves from space.\n\nRadar Systems: Parabolic reflectors focus transmitted and received waves.\n\nFlashlights and Car Headlights: Parabolic mirrors direct light rays in a specific direction.\n\n\n\n\n\nThe reflective property of parabolas makes them ideal for applications requiring the concentration of waves or signals. Satellite dishes, telescopes, and antennas rely on parabolic designs to ensure efficient signal collection and transmission."
  },
  {
    "objectID": "math/parabolas/antennas/index.html#parabolas-in-satellite-dishes-and-antennas",
    "href": "math/parabolas/antennas/index.html#parabolas-in-satellite-dishes-and-antennas",
    "title": "Parabolas in Satellite Dishes and Antennas",
    "section": "",
    "text": "Parabolas are integral in designing satellite dishes and radio antennas due to their unique reflective properties. A parabola focuses all incoming signals or waves to a single point, known as the focus, ensuring optimal signal reception.\n\n\n\nA parabolic reflector is shaped like a parabola and has the following properties:\n\nParabolic Equation:\nThe shape of the dish can be represented as:\n\\[\ny = ax^2\n\\]\n\n\\(y\\) represents the vertical distance.\n\n\\(x\\) represents the horizontal distance.\n\n\\(a\\) is a coefficient that determines the steepness of the parabola.\n\nFocus:\n\nIncoming parallel waves (radio, light, or sound) reflect off the parabolic surface and converge at a single point called the focus.\n\nThe receiver (or feed horn) is placed at the focus to collect the signals.\n\nReflective Property:\nThe parabola reflects all waves parallel to its axis toward the focus, maximizing signal strength.\n\n\n\n\n\nA satellite dish works as a parabolic reflector to collect signals from communication satellites:\n- Signals from space hit the parabolic surface.\n- The surface reflects the signals to the receiver at the dish’s focus.\n- The signals are then processed and transmitted to your devices.\n\n\n\n\nBelow is a visualization of how a parabola reflects incoming waves toward its focus.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSatellite Dishes: Parabolic reflectors ensure signals from satellites converge at the focus for clear reception.\n\nRadio Telescopes: Used to collect faint radio waves from space.\n\nRadar Systems: Parabolic reflectors focus transmitted and received waves.\n\nFlashlights and Car Headlights: Parabolic mirrors direct light rays in a specific direction.\n\n\n\n\n\nThe reflective property of parabolas makes them ideal for applications requiring the concentration of waves or signals. Satellite dishes, telescopes, and antennas rely on parabolic designs to ensure efficient signal collection and transmission."
  },
  {
    "objectID": "math/parabolas/index.html",
    "href": "math/parabolas/index.html",
    "title": "Parabolas",
    "section": "",
    "text": "\\(f(x) = ax^2 + bx + c\\)\nThe coefficient \\(a\\) determines both width and direction:\n\n\\(\\mathbf{a &gt; 0}\\): Opens upward\n\\(\\mathbf{a &lt; 0}\\): Opens downward\n\\(\\mathbf{|a| &gt; 1}\\): Narrower\n\\(\\mathbf{|a| &lt; 1}\\): Wider\n\nThe constant term \\(c\\) controls vertical position:\n\n\\(\\mathbf{c &gt; 0}\\): shift up\n\\(\\mathbf{c &lt; 0}\\): shift down"
  },
  {
    "objectID": "math/parabolas/index.html#standard-form",
    "href": "math/parabolas/index.html#standard-form",
    "title": "Parabolas",
    "section": "",
    "text": "\\(f(x) = ax^2 + bx + c\\)\nThe coefficient \\(a\\) determines both width and direction:\n\n\\(\\mathbf{a &gt; 0}\\): Opens upward\n\\(\\mathbf{a &lt; 0}\\): Opens downward\n\\(\\mathbf{|a| &gt; 1}\\): Narrower\n\\(\\mathbf{|a| &lt; 1}\\): Wider\n\nThe constant term \\(c\\) controls vertical position:\n\n\\(\\mathbf{c &gt; 0}\\): shift up\n\\(\\mathbf{c &lt; 0}\\): shift down"
  },
  {
    "objectID": "math/parabolas/index.html#vertex-form",
    "href": "math/parabolas/index.html#vertex-form",
    "title": "Parabolas",
    "section": "Vertex Form",
    "text": "Vertex Form\n\\(f(x) = a(x - h)^2 + k\\)\n\n\\(h\\) controls horizontal shift\n\n\\(h &gt; 0\\): shift right\n\\(h &lt; 0\\): shift left\n\n\\(k\\) is the vertical position of the vertex\n\n\\(k &gt; 0\\): shift up\n\\(k &lt; 0\\): shift down"
  },
  {
    "objectID": "math/parabolas/index.html#try-it-out",
    "href": "math/parabolas/index.html#try-it-out",
    "title": "Parabolas",
    "section": "🔨 Try it out!",
    "text": "🔨 Try it out!"
  },
  {
    "objectID": "math/parabolas/index.html#explore-more",
    "href": "math/parabolas/index.html#explore-more",
    "title": "Parabolas",
    "section": "🧭 Explore more",
    "text": "🧭 Explore more\nParabolas appear in many real-world applications. Check out how they are used in:\n\nBridges and Architecture: Learn how parabolic shapes provide structural efficiency in suspension bridges and architectural designs.\nProjectile Motion: Discover how parabolas describe the path of objects moving under gravity.\nAntennas and Satellite Dishes: Explore how parabolic reflectors focus signals in communication systems."
  },
  {
    "objectID": "notebooks/nlp/fetching-the-gkg/index.html",
    "href": "notebooks/nlp/fetching-the-gkg/index.html",
    "title": "Fetching from the GKG",
    "section": "",
    "text": "View on GitHub"
  },
  {
    "objectID": "posts/2022-10-11-adding-post-content-to-jekyll-search/index.html",
    "href": "posts/2022-10-11-adding-post-content-to-jekyll-search/index.html",
    "title": "Adding Post content to Jekyll search",
    "section": "",
    "text": "I used this tutorial at webjeda.com to add simple search capabilities to my Jekyll site.\nThe article recommends against including the full content in the search config, stating:\n\nYou can also add post.content to this. But I recommend not to. Adding content will result in a huge JSON file and also inaccurate search result.\n\nSince I am just getting started, I am not too concerned about the search json getting too large (yet) – I want to see how far this simple approach will take me before I need to change tack.\nThe “inaccurate search result” is not really explained, and is not intuitive to me. I suspect it is more this, which I found: using the following seems to break the search entirely (although I am not sure why):\n⚠️ Probably don’t do this:\n{% raw %}\"content\"  : \"{{ post.content | strip_html | strip_newlines }}\"{% endraw %}\nInstead, I’ve found that using cgi_escape, which replaces spaces with + signs, instead of strip_newlines seems to do the trick without breaking the search:\n✅ Do this instead:\n{% raw %}\"content\"  : \"{{ post.content | strip_html | cgi_escape }}\"{% endraw %}"
  },
  {
    "objectID": "posts/2022-10-11-use-baseurl-for-jekyll-assets/index.html",
    "href": "posts/2022-10-11-use-baseurl-for-jekyll-assets/index.html",
    "title": "Use baseurl to specify the location of assets in Jekyll",
    "section": "",
    "text": "Jekyll’s baseurl parameter is a path prefix (i.e. the subpath of your site) which is specified in the _config.yml file. Specify this parameter, for example, for GitHub project pages where the path prefix is the name of the repository.\nIn your content then, specify static assets by this path so that in the future you can easily change the prefix without breaking your site.\nE.g., an image location in a Markdown post might look like this:\n{% raw %}![My Image]({{ site.baseurl }}/assets/images/my-image.png){% endraw %}"
  },
  {
    "objectID": "posts/2025-03-17-getting-news-content/index.html",
    "href": "posts/2025-03-17-getting-news-content/index.html",
    "title": "Some ways to easily get news content",
    "section": "",
    "text": "It is a common scenario in the lab to need to get ahold of some news content to work with for experimenting with and building projects. Here are some go-to approaches that I use:"
  },
  {
    "objectID": "posts/2025-03-17-getting-news-content/index.html#the-cc-news-dataset",
    "href": "posts/2025-03-17-getting-news-content/index.html#the-cc-news-dataset",
    "title": "Some ways to easily get news content",
    "section": "The cc-news dataset",
    "text": "The cc-news dataset\nThe cc-news dataset on Huggingface is probably the easiest way to just grab a bunch of articles. You may need to accept the licensing agreement in HuggingFace, but beyond that, it is about as simple as this:\npip install datasets\nfrom datasets import load_dataset\ndataset = load_dataset(\"cc_news\", split=\"train\") # note: there is only a \"train\" split available for this dataset\nfor article in dataset:\n    ... # keys include title, text, url, date, domain, description, image_url"
  },
  {
    "objectID": "posts/2025-03-17-getting-news-content/index.html#news-api",
    "href": "posts/2025-03-17-getting-news-content/index.html#news-api",
    "title": "Some ways to easily get news content",
    "section": "News API",
    "text": "News API\nnewsapi.org is super easy to use and has a reasonable free tier of 100 requests per day, which is suitable for a lot of basic use cases, and will give you more recent news than the cc-news dataset."
  },
  {
    "objectID": "posts/2025-03-17-getting-news-content/index.html#the-gdelt-gkg",
    "href": "posts/2025-03-17-getting-news-content/index.html#the-gdelt-gkg",
    "title": "Some ways to easily get news content",
    "section": "The GDELT GKG",
    "text": "The GDELT GKG\nThe GDELT raw files, which include the Global Knowledge Graph of up-to-date news article references released every 15 minutes is a bit more of a lift. The GKG Does not provide the articles themselves, so you will have to fetch the articles yourelf, but it does include a good amount of potentially useful metadata along with the URLs, and it is 100% free to use.\nFor extracting news articles from fetched html pages, I variously use the following tools:\n\nGoose3\nNewspaper3k\nTrafilatura\n\nFor more detail about this approach, see my code notebook: Fetching from the GKG"
  },
  {
    "objectID": "posts/2025-05-10-typesense-in-production/index.html",
    "href": "posts/2025-05-10-typesense-in-production/index.html",
    "title": "Speed Up Typesense Startup in Production with Disk Persistence",
    "section": "",
    "text": "If you’re running Typesense in production with large collections or semantic search, startup time can become a bottleneck. By default, Typesense rebuilds its in-memory index from scratch on each boot — which means loading and re-indexing every document. This can take minutes (or hours) as your dataset grows.\nTo fix this, enable disk persistence and snapshots so your data and indexes are saved between restarts."
  },
  {
    "objectID": "posts/2025-05-10-typesense-in-production/index.html#how-to-enable-disk-persistence",
    "href": "posts/2025-05-10-typesense-in-production/index.html#how-to-enable-disk-persistence",
    "title": "Speed Up Typesense Startup in Production with Disk Persistence",
    "section": "🔧 How to Enable Disk Persistence",
    "text": "🔧 How to Enable Disk Persistence\nEdit your typesense-server.ini:\nenable_disk_persistence = true\nsnapshot_interval_seconds = 300\nThis configuration tells Typesense to:\n\nSave a snapshot of in-memory state every 5 minutes.\nReuse that snapshot to skip rebuilding indexes on startup.\n\nThen restart the server:\nsudo systemctl restart typesense-server\n⸻\n✅ Verifying It Works\nYou can confirm snapshot saving and reuse in two ways:\n\nLog Messages\n\nRun:\njournalctl -u typesense-server -f\nLook for messages like:\nSaving snapshot for collection content_en Restoring collection from snapshot\nThis confirms that the collection was successfully persisted and restored.\n\nCheck Snapshot Files on Disk\n\nNavigate to your data-dir, e.g.:\ncd /mnt/data/typesense/data/\nThere should be a folder of .sst file that looks something like this:\nstate/snapshot/snapshot_00000000000000394299/db_snapshot/\nThese files store the serialized in-memory state and write-ahead log.\n⸻\n🚀 Result: Faster Restarts\nWithout disk persistence, Typesense must reload and re-index every document from disk. With snapshots enabled, startup time drops dramatically — even with millions of documents.\n\n\n\nDocuments\nWithout Persistence\nWith Persistence\n\n\n\n\n100k\n~2 minutes\n~5 seconds\n\n\n1M\n~20 minutes\n~15 seconds\n\n\n\n⸻\n🛡️ Production-Ready Tip\nEnable disk persistence for any production deployment, especially when using:\n\nLarge text collections\nONNX/embedding-based semantic search\nLimited system memory or shared environments\n\nSnapshots keep your data safe and your APIs fast after restarts or crashes.\n⸻"
  },
  {
    "objectID": "project-setup.html",
    "href": "project-setup.html",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Install nvm.fish to manage Node versions natively in Fish shell:\nfisher install jorgebucaran/nvm.fish\n\n\n\n\nInstall the specific Node versions needed for your project.\n\nInstall a specific version: fish  nvm install 12.18.1\nInstall the latest LTS release: fish  nvm install lts/iron\nVerify installed versions: fish  nvm ls\n\n\n\n\n\nIf the correct Python version is not available, use pyenv to install it:\n\nInstall a specific Python version: bash  pyenv install 3.10.12\nSet the local Python version for the project: bash  pyenv local 3.10.12\n\nVerify the Python version:\npython --version\n\n\n\n\nCreate a virtual environment for the project:\n\nUse the Python shim to create a virtual environment: bash  python -m venv .venv\nSource the virtual environment (handled by direnv): bash  source .venv/bin/activate\nUpgrade pip: bash  pip install --upgrade pip\nInstall project dependencies (e.g., from a requirements.txt file): bash  pip install -r requirements.txt\n\nVerify the virtual environment and Python version:\nwhich python\npython --version\n\n\n\n\nThe .nvmrc file specifies the Node version required for your project.\nExample .nvmrc file:\n12.18.1\n\n\n\n\nSet up Node.js, Python virtual environments, and environment variables using direnv.\n.envrc:\n# Set NVM directory\nexport NVM_DIR=\"$HOME/.local/share/nvm\"\n\n# Use Node.js version specified in .nvmrc\nNODE_VERSION=$(cat .nvmrc)\nNODE_BIN_PATH=\"$NVM_DIR/versions/node/v$NODE_VERSION/bin\"\n\nif [ -d \"$NODE_BIN_PATH\" ]; then\n    export PATH=\"$NODE_BIN_PATH:$PATH\"\nelse\n    echo \"Node version $NODE_VERSION is not installed. Run: nvm install $NODE_VERSION\"\n    exit 1\nfi\n\n# Activate Python virtual environment\nsource .venv/bin/activate\n\n# Load environment variables from .env\ndotenv .env\nAllow direnv to load the environment:\ndirenv allow\n\n\n\n\nInstall all project dependencies based on package.json:\nnpm install\n\n\n\n\nList local project dependencies:\nnpm list --depth=0\nCheck for missing peer dependencies or vulnerabilities:\nnpm audit\nFix missing peer dependencies:\nnpm install &lt;package-name&gt; --save-dev\n\n\n\n\nStart the development server:\nnpm start\nBuild the project:\nnpm run build\nVerify Python setup:\nwhich python\npython --version\n\n\n\n\n\nInstall NVM and Node versions:\nfisher install jorgebucaran/nvm.fish\nnvm install &lt;version&gt;\nSet Node version in .nvmrc:\n12.18.1\nInstall Python version and create virtual environment:\npyenv install 3.10.12\npyenv local 3.10.12\npython -m venv .venv\nActivate the environment with direnv:\ndirenv allow\nInstall dependencies:\npip install --upgrade pip\npip install -r requirements.txt\nnpm install\nVerify and run:\nnpm list --depth=0\nnpm start\npython --version\n\n✅ Done: Your Node.js and Python project environment is ready!\n\n\n\n\n\nrm -rf node_modules package-lock.json\nnpm install\n\n\n\nrm -rf .venv\nUnsource the environment and re-create with the correct python (see above)\npython -m venv .venv"
  },
  {
    "objectID": "project-setup.html#install-nvm.fish-for-fish-shell",
    "href": "project-setup.html#install-nvm.fish-for-fish-shell",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Install nvm.fish to manage Node versions natively in Fish shell:\nfisher install jorgebucaran/nvm.fish"
  },
  {
    "objectID": "project-setup.html#install-required-node.js-versions",
    "href": "project-setup.html#install-required-node.js-versions",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Install the specific Node versions needed for your project.\n\nInstall a specific version: fish  nvm install 12.18.1\nInstall the latest LTS release: fish  nvm install lts/iron\nVerify installed versions: fish  nvm ls"
  },
  {
    "objectID": "project-setup.html#install-required-python-version",
    "href": "project-setup.html#install-required-python-version",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "If the correct Python version is not available, use pyenv to install it:\n\nInstall a specific Python version: bash  pyenv install 3.10.12\nSet the local Python version for the project: bash  pyenv local 3.10.12\n\nVerify the Python version:\npython --version"
  },
  {
    "objectID": "project-setup.html#create-python-virtual-environment",
    "href": "project-setup.html#create-python-virtual-environment",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Create a virtual environment for the project:\n\nUse the Python shim to create a virtual environment: bash  python -m venv .venv\nSource the virtual environment (handled by direnv): bash  source .venv/bin/activate\nUpgrade pip: bash  pip install --upgrade pip\nInstall project dependencies (e.g., from a requirements.txt file): bash  pip install -r requirements.txt\n\nVerify the virtual environment and Python version:\nwhich python\npython --version"
  },
  {
    "objectID": "project-setup.html#create-a-.nvmrc-file",
    "href": "project-setup.html#create-a-.nvmrc-file",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "The .nvmrc file specifies the Node version required for your project.\nExample .nvmrc file:\n12.18.1"
  },
  {
    "objectID": "project-setup.html#create-.envrc-for-project-setup",
    "href": "project-setup.html#create-.envrc-for-project-setup",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Set up Node.js, Python virtual environments, and environment variables using direnv.\n.envrc:\n# Set NVM directory\nexport NVM_DIR=\"$HOME/.local/share/nvm\"\n\n# Use Node.js version specified in .nvmrc\nNODE_VERSION=$(cat .nvmrc)\nNODE_BIN_PATH=\"$NVM_DIR/versions/node/v$NODE_VERSION/bin\"\n\nif [ -d \"$NODE_BIN_PATH\" ]; then\n    export PATH=\"$NODE_BIN_PATH:$PATH\"\nelse\n    echo \"Node version $NODE_VERSION is not installed. Run: nvm install $NODE_VERSION\"\n    exit 1\nfi\n\n# Activate Python virtual environment\nsource .venv/bin/activate\n\n# Load environment variables from .env\ndotenv .env\nAllow direnv to load the environment:\ndirenv allow"
  },
  {
    "objectID": "project-setup.html#install-node-project-dependencies",
    "href": "project-setup.html#install-node-project-dependencies",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Install all project dependencies based on package.json:\nnpm install"
  },
  {
    "objectID": "project-setup.html#verify-dependencies",
    "href": "project-setup.html#verify-dependencies",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "List local project dependencies:\nnpm list --depth=0\nCheck for missing peer dependencies or vulnerabilities:\nnpm audit\nFix missing peer dependencies:\nnpm install &lt;package-name&gt; --save-dev"
  },
  {
    "objectID": "project-setup.html#run-and-test-the-project",
    "href": "project-setup.html#run-and-test-the-project",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Start the development server:\nnpm start\nBuild the project:\nnpm run build\nVerify Python setup:\nwhich python\npython --version"
  },
  {
    "objectID": "project-setup.html#workflow-summary",
    "href": "project-setup.html#workflow-summary",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "Install NVM and Node versions:\nfisher install jorgebucaran/nvm.fish\nnvm install &lt;version&gt;\nSet Node version in .nvmrc:\n12.18.1\nInstall Python version and create virtual environment:\npyenv install 3.10.12\npyenv local 3.10.12\npython -m venv .venv\nActivate the environment with direnv:\ndirenv allow\nInstall dependencies:\npip install --upgrade pip\npip install -r requirements.txt\nnpm install\nVerify and run:\nnpm list --depth=0\nnpm start\npython --version\n\n✅ Done: Your Node.js and Python project environment is ready!"
  },
  {
    "objectID": "project-setup.html#additional-notes",
    "href": "project-setup.html#additional-notes",
    "title": "🚀 Node.js and Python Project Setup Cheatsheet",
    "section": "",
    "text": "rm -rf node_modules package-lock.json\nnpm install\n\n\n\nrm -rf .venv\nUnsource the environment and re-create with the correct python (see above)\npython -m venv .venv"
  }
]